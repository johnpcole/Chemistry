      SUBROUTINE MAKE_RHO(VIBSTATE,ROTSTATE,STATEMAX,E_LIMIT,GRID,
     &                         PROBMAX,PROB_KIN,PROB_VIB,PROB_ROT,
     &                                 STRCONST,PROB_STR,ORBSTATE,
     &                         VSTATEMAX,DIASTATE,PROB_DIA,R_MASS)

C- THIS SUBROUTINE CREATES THE KINETIC-NONKINETIC
C- NORMALISED PROBABILITY DISTRIBUTION ARRAY

      IMPLICIT NONE

      REAL*8 E_LIMIT      ! AMOUNT OF AVAILABLE ENERGY
      REAL*8 E_ROT        ! ROTATIONAL ENERGY OF FRAGMENT
      REAL*8 GRID         ! INTEGRATION COARSENESS VALUE
      INTEGER INDEX       ! COUNTING FLAG
      REAL*8 LEVELS       ! ROTATIONAL-KINETIC DEGENERACY
      REAL*8 NORMAL       ! NORMALISATION CONSTANT
      REAL*8 E_KIN        ! PRODUCT KINETIC ENERGY
      REAL*8 E_NONVIB     ! PRODUCT NONVIB ENERGY
      REAL*8 E_STR        ! PRODUCT STRETCH VIBRATIONAL ENERGY
      REAL*8 E_TOTAL      ! PRODUCT TOTAL ENERGY
      REAL*8 E_VIB        ! PRODUCT VIBRATIONAL ENERGY
      REAL*8 PROB_KIN     ! KINETIC PROBABILITY ARRAY
      REAL*8 PROB_ROT     ! ROTATIONAL PROBABILITY ARRAY
      REAL*8 PROB_VIB     ! VIBRATIONAL PROBABILITY ARRAY
      INTEGER PROBMAX     ! PROBABILITY ARRAY SIZE
      INTEGER ROT_MARK    ! ROTATIONAL STATES TABLE INDEX
      INTEGER ROT_TOP     ! TOP OF ROTATIONAL STATES TABLE
      REAL*8 ROTSTATE     ! ROTATIONAL STATES TABLE
      INTEGER STATEMAX    ! DATA TABLES SIZE
      INTEGER VIB_MARK    ! VIBRATIONAL STATES TABLE INDEX
      INTEGER VIB_TOP     ! TOP OF VIBRATIONAL STATES TABLE
      REAL*8 VIBSTATE     ! VIBRATIONAL STATES TABLE
      INTEGER STR_VAL     ! STRETCHING VIBRATION
      INTEGER STR_MAX     ! STRETCHING VIBRATION
      REAL*8 STRCONST
      REAL*8 PROB_STR
      INTEGER ORBSTATE
      INTEGER DIASTATE
      INTEGER VSTATEMAX
      INTEGER LINEAR_J
      REAL*8 TOTAL_VE
      REAL*8 PROB_DIA
      INTEGER L_VAL,ENERGY,DEGSTATE
      REAL*8 R_LEVELS,K_LEVELS,R_MASS,SPHERE

      DIMENSION PROB_KIN(0:PROBMAX)               ! KINETIC PROBABILITY ARRAY
      DIMENSION PROB_ROT(0:PROBMAX)               ! ROTATIONAL PROBABILITY ARRAY
      DIMENSION PROB_VIB(0:PROBMAX)               ! VIBRATIONAL PROBABILITY ARRAY
      DIMENSION PROB_STR(0:1000)                  ! STRETCHING PROBABILITY ARRAY
      DIMENSION PROB_DIA(0:1000)                  ! LINEAR_J PROBABILITY ARRAY
      DIMENSION VIBSTATE(0:VSTATEMAX)   ! VIBRATIONAL STATES TABLE
      DIMENSION ROTSTATE(0:STATEMAX)         ! ROTATIONAL STATES TABLE
      DIMENSION ORBSTATE(0:STATEMAX)
      DIMENSION DIASTATE(0:STATEMAX)
      DIMENSION DEGSTATE(0:STATEMAX)

C-    INITIALISE THE PROBABILITY ARRAY

      DO INDEX=0,PROBMAX
         PROB_KIN(INDEX)=0.0D0
         PROB_ROT(INDEX)=0.0D0
         PROB_VIB(INDEX)=0.0D0
         END DO
      DO INDEX=0,1000
         PROB_STR(INDEX)=0.0D0
         PROB_DIA(INDEX)=0.0D0
         END DO

C-    FIND STATE TABLE LIMITS

      ROT_TOP=STATEMAX
      VIB_TOP=VSTATEMAX
      DO INDEX=STATEMAX,1,-1
         IF (ROTSTATE(INDEX).LT.(0.0D0)) ROT_TOP=INDEX-1
         END DO
      DO INDEX=VSTATEMAX,1,-1
         IF (VIBSTATE(INDEX).LT.(0.0D0)) VIB_TOP=INDEX-1
         END DO

C-    SET ENERGY LIMITS

      E_TOTAL=E_LIMIT

      IF (INT(E_TOTAL/GRID).GT.PROBMAX) THEN
         PAUSE 'PROBAB ARRAY NOT BIG ENOUGH'
         STOP
         END IF

C-    BUILD UP PROBABILITY ARRAY

      STR_MAX=INT((E_TOTAL/STRCONST)-0.5)
      IF (STR_MAX.GT.100) THEN
         PAUSE 'STRETCH PROBABILITY TOO SMALL'
         STOP
         END IF

      DO STR_VAL=0,STR_MAX
         E_STR=STRCONST*(DFLOAT(STR_VAL)+0.5)

            WRITE (*,'(A,F6.2,A)')
     &                          ' CREATING PROBABILITY DISTRIBUTIONS: ',
     &                   (100.0D0*DFLOAT(STR_VAL+1)/DFLOAT(STR_MAX+1)),
     &                                            '% DONE OF OUTER LOOP'

         DO VIB_MARK=0,VIB_TOP

            E_VIB=VIBSTATE(VIB_MARK)
            E_NONVIB=E_TOTAL-(E_VIB+E_STR)

            DO ROT_MARK=0,ROT_TOP

               E_ROT=ROTSTATE(ROT_MARK)
               E_KIN=E_NONVIB-E_ROT

               IF (E_KIN.GE.(0.0D0)) THEN

                  L_VAL=ORBSTATE(ROT_MARK)
                  R_LEVELS=DFLOAT(DEGSTATE(ROT_MARK))
                  ENERGY=INT(E_KIN/GRID)

                  K_LEVELS=SPHERE(L_VAL,ENERGY,R_MASS,GRID)
                  LEVELS=R_LEVELS*K_LEVELS
                  LEVELS=LEVELS*SQRT(2.0D0*E_KIN/R_MASS)   ! USE THIS EXPRESSION TO CONVERT PROBABILITY INTO RATE
                  LINEAR_J=DIASTATE(ROT_MARK)
                  TOTAL_VE=E_STR+E_VIB

                  PROB_KIN(INT(E_KIN/GRID))
     &                                 =PROB_KIN(INT(E_KIN/GRID))+LEVELS

                  PROB_VIB(INT(TOTAL_VE/GRID))
     &                              =PROB_VIB(INT(TOTAL_VE/GRID))+LEVELS

                  PROB_ROT(INT(E_ROT/GRID))
     &                                 =PROB_ROT(INT(E_ROT/GRID))+LEVELS

                  PROB_STR(STR_VAL)
     &                                         =PROB_STR(STR_VAL)+LEVELS

                  PROB_DIA(LINEAR_J)
     &                                        =PROB_DIA(LINEAR_J)+LEVELS

                  END IF

               END DO ! ROT

            END DO ! VIB         

         END DO ! STR

C-    NORMALISE PROBABILITY ARRAY

      NORMAL=0.0D0
      DO INDEX=0,PROBMAX
         NORMAL=NORMAL+PROB_KIN(INDEX)
         NORMAL=NORMAL+PROB_ROT(INDEX)
         NORMAL=NORMAL+PROB_VIB(INDEX)
         END DO
      DO INDEX=0,1000
         NORMAL=NORMAL+PROB_STR(INDEX)
         NORMAL=NORMAL+PROB_DIA(INDEX)
         END DO
      NORMAL=NORMAL/5.0D0
      DO INDEX=0,PROBMAX
         PROB_KIN(INDEX)=PROB_KIN(INDEX)/NORMAL
         PROB_ROT(INDEX)=PROB_ROT(INDEX)/NORMAL
         PROB_VIB(INDEX)=PROB_VIB(INDEX)/NORMAL
         END DO
      DO INDEX=0,1000
         PROB_STR(INDEX)=PROB_STR(INDEX)/NORMAL
         PROB_DIA(INDEX)=PROB_DIA(INDEX)/NORMAL
         END DO

      RETURN
      END

