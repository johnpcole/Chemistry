      SUBROUTINE MAKE_RHO(VIBSTATE,ROTSTATE,STATEMAX,E_LIMIT,GRID,
     &                 PROBMAX,PROB_KIN,PROB_VIB,PROB_ROT,ORBSTATE,
     &                                                DEGSTATE,R_MASS)

C- THIS SUBROUTINE CREATES THE KINETIC-NONKINETIC
C- NORMALISED PROBABILITY DISTRIBUTION ARRAY

      IMPLICIT NONE

      REAL*8 E_LIMIT      ! AMOUNT OF AVAILABLE ENERGY
      REAL*8 GRID         ! INTEGRATION COARSENESS VALUE
      INTEGER INDEX       ! COUNTING FLAG
      REAL*8 NORMAL       ! NORMALISATION CONSTANT
      REAL*8 PROB_KIN     ! KINETIC PROBABILITY ARRAY
      REAL*8 PROB_ROT     ! ROTATIONAL PROBABILITY ARRAY
      REAL*8 PROB_VIB     ! VIBRATIONAL PROBABILITY ARRAY
      INTEGER PROBMAX     ! PROBABILITY ARRAY SIZE
      INTEGER ROT_MARK    ! ROTATIONAL STATES TABLE INDEX
      INTEGER ROT_TOP     ! TOP OF ROTATIONAL STATES TABLE
      REAL*8 ROTSTATE     ! ROTATIONAL STATES TABLE
      INTEGER ORBSTATE     ! ROTATIONAL STATES TABLE
      INTEGER DEGSTATE     ! ROTATIONAL STATES TABLE
      INTEGER STATEMAX    ! DATA TABLES SIZE
      INTEGER VIB_MARK    ! VIBRATIONAL STATES TABLE INDEX
      INTEGER VIB_TOP     ! TOP OF VIBRATIONAL STATES TABLE
      REAL*8 VIBSTATE     ! VIBRATIONAL STATES TABLE
      INTEGER ECHOMARK,ECHOTOP
      REAL*8 R_MASS
      REAL*8 E_TOTAL,E_VIB,E_ROT,E_NONVIB,E_KIN
      INTEGER L_VAL,ENERGY
      REAL*8 K_LEVELS,R_LEVELS,LEVELS
      REAL*8 SPHERE


      DIMENSION PROB_KIN(0:PROBMAX)           ! KINETIC PROBABILITY ARRAY
      DIMENSION PROB_ROT(0:PROBMAX)           ! ROTATIONAL PROBABILITY ARRAY
      DIMENSION PROB_VIB(0:PROBMAX)           ! VIBRATIONAL PROBABILITY ARRAY
      DIMENSION VIBSTATE(0:STATEMAX)          ! VIBRATIONAL STATES TABLE
      DIMENSION ROTSTATE(0:STATEMAX)          ! ROTATIONAL STATES TABLE
      DIMENSION DEGSTATE(0:STATEMAX)          ! ROTATIONAL STATES TABLE
      DIMENSION ORBSTATE(0:STATEMAX)          ! ROTATIONAL STATES TABLE

C-    INITIALISE THE PROBABILITY ARRAY

      DO INDEX=0,PROBMAX
         PROB_KIN(INDEX)=0.0D0
         PROB_ROT(INDEX)=0.0D0
         PROB_VIB(INDEX)=0.0D0
         END DO

C-    FIND STATE TABLE LIMITS

      ROT_TOP=STATEMAX
      VIB_TOP=STATEMAX
      DO INDEX=STATEMAX,1,-1
         IF (ROTSTATE(INDEX).LT.(0.0D0)) ROT_TOP=INDEX-1
         IF (VIBSTATE(INDEX).LT.(0.0D0)) VIB_TOP=INDEX-1
         END DO

C-    SET ENERGY LIMITS

      E_TOTAL=E_LIMIT

      IF (INT(E_TOTAL/GRID).GT.PROBMAX) THEN
         PAUSE 'PROBAB ARRAY NOT BIG ENOUGH'
         STOP
         END IF

C-    BUILD UP PROBABILITY ARRAY

      DO ECHOMARK=0,VIB_TOP,100

         WRITE (*,'(A,F6.2,A)')
     &                          ' CREATING PROBABILITY DISTRIBUTIONS: ',
     &                   (100.0D0*DFLOAT(ECHOMARK+1)/DFLOAT(VIB_TOP+1)),
     &                                            '% DONE OF OUTER LOOP'

         ECHOTOP=MIN(VIB_TOP,ECHOMARK+99)

      DO VIB_MARK=ECHOMARK,ECHOTOP

         E_VIB=VIBSTATE(VIB_MARK)             ! VIBRATIONAL ENERGY AT PRODUCT
         E_NONVIB=E_TOTAL-E_VIB               ! NON-VIBRATIONAL ENERGY AT PRODUCT

         DO ROT_MARK=0,ROT_TOP

            E_ROT=ROTSTATE(ROT_MARK)          ! ROTATIONAL ENERGY (AT ALL POINTS)
            E_KIN=E_NONVIB-E_ROT              ! KINETIC ENERGY AT PRODUCT

            IF (E_KIN.GE.(0.0D0)) THEN        ! LEVEL IS ALLOWED AT PRODUCT

               L_VAL=ORBSTATE(ROT_MARK)
               R_LEVELS=DFLOAT(DEGSTATE(ROT_MARK))
               ENERGY=INT(E_KIN/GRID)

               K_LEVELS=SPHERE(L_VAL,ENERGY,R_MASS,GRID)
               LEVELS=R_LEVELS*K_LEVELS
               LEVELS=LEVELS*SQRT(2.0D0*E_KIN/R_MASS)   ! USE THIS EXPRESSION TO CONVERT PROBABILITY INTO RATE

               PROB_KIN(INT(E_KIN/GRID))=PROB_KIN(INT(E_KIN/GRID))
     &                                                           +LEVELS
               PROB_VIB(INT(E_VIB/GRID))=PROB_VIB(INT(E_VIB/GRID))
     &                                                           +LEVELS
               PROB_ROT(INT(E_ROT/GRID))=PROB_ROT(INT(E_ROT/GRID))
     &                                                           +LEVELS

               END IF

            END DO ! ROT

         END DO ! VIB

         END DO ! ECHO

C-    NORMALISE PROBABILITY ARRAY

      NORMAL=0.0D0
      DO INDEX=0,PROBMAX
         NORMAL=NORMAL+PROB_KIN(INDEX)
         NORMAL=NORMAL+PROB_ROT(INDEX)
         NORMAL=NORMAL+PROB_VIB(INDEX)
         END DO
      NORMAL=NORMAL/3.0D0
      DO INDEX=0,PROBMAX
         PROB_KIN(INDEX)=PROB_KIN(INDEX)/NORMAL
         PROB_ROT(INDEX)=PROB_ROT(INDEX)/NORMAL
         PROB_VIB(INDEX)=PROB_VIB(INDEX)/NORMAL
         END DO

      RETURN
      END

